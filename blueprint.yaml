tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.5/plugin.yaml
  - http://www.getcloudify.org/spec/kubernetes-plugin/2.0.0/plugin.yaml
  - http://www.getcloudify.org/spec/dblb/0.2/plugin.yaml

inputs:

  environment_blueprint_filename:
    default: openstack.yaml

  lb_blueprint_archive:
    default: https://github.com/cloudify-examples/haproxy-blueprint/archive/1b56f1ebb524576e755535c3aa687e20a39b94f9.zip

  db_blueprint_archive:
    default: https://github.com/cloudify-examples/mariadb-blueprint/archive/f2d91c267743ab14c86703efafda02cfd7cac466.zip

  kubernetes_master_ip:
    type: string
    default: { get_secret: kubernetes_master_ip }

  kubernetes_master_port:
    type: string
    default: { get_secret: kubernetes_master_port }

  kubernetes_certificate_authority_data:
    default: { get_secret: kubernetes_certificate_authority_data }

  kubernetes-admin_client_certificate_data:
    default: { get_secret: kubernetes-admin_client_certificate_data }

  kubernetes-admin_client_key_data:
    default: { get_secret: kubernetes-admin_client_key_data }

  new_database_user:
    default: demo

  new_database_password:
    default: new_password

  use_external_database:
    default: false

  proxy_manager_network:
    default: external

  db_image:
    default: 05bb3a46-ca32-4032-bedd-8d7ebd5c8100

  lb_image:
    default: aee5438f-1c7c-497f-a11e-53360241cf0f

  db_blueprint:
    default: db

  lb_blueprint:
    default: lb

  db_deployment:
    default: { get_input: db_blueprint }

  lb_deployment:
    default:  { get_input: lb_blueprint }

node_types:

  cloudify.kubernetes.resources.PersistentVolumeClaim:
    derived_from: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      api_mapping:
        default:
          create:
            api: CoreV1Api
            method: create_namespaced_persistent_volume_claim
            payload: V1PersistentVolumeClaim
          read:
            api: CoreV1Api
            method: read_namespaced_persistent_volume_claim
          delete:
            api: CoreV1Api
            method: delete_namespaced_persistent_volume_claim
            payload: V1DeleteOptions
          update:
            api: CoreV1Api
            method: patch_namespaced_persistent_volume_claim

dsl_definitions:

  kube_config: &kube_config
    apiVersion: v1
    kind: Config
    preferences: {}
    current-context: kubernetes-admin@kubernetes
    clusters:
    - name: kubernetes
      cluster:
        certificate-authority-data: { get_input: kubernetes_certificate_authority_data }
        server: { concat: [ 'https://', { get_input: kubernetes_master_ip}, ':', { get_input: kubernetes_master_port } ] }
    contexts:
    - name: kubernetes-admin@kubernetes
      context:
        cluster: kubernetes
        user: kubernetes-admin
    users:
    - name: kubernetes-admin
      user:
        client-certificate-data: { get_input: kubernetes-admin_client_certificate_data }
        client-key-data:  { get_input: kubernetes-admin_client_key_data }

node_templates:

  app_svc:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/service.yaml
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: app_deploy

  app_deploy:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/deployment.yaml
        template_variables:
          db_host: { get_attribute: [ lb, deployment, outputs, ip ] }
          db_user_password: { get_input: new_database_password }
          db_user: { get_input: new_database_user }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: pv_claim
      - type: cloudify.relationships.depends_on
        target: lb
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: kubernetes.cloudify_kubernetes.tasks.file_resource_create
          inputs:
            file:
              resource_path: resources/deployment.yaml
              template_variables:
                db_host: { get_attribute: [ lb, deployment, outputs, ip ] }
                db_user_password: { get_input: new_database_password }
                db_user: { get_input: new_database_user }

  pv_claim:
    type: cloudify.kubernetes.resources.PersistentVolumeClaim
    properties:
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: pv-claim
          labels:
            app: wordpress
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: pv_1

  pv_1:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/persistent-volume.yaml
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: *kube_config

  lb:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: lb_blueprint }
          blueprint_archive: https://github.com/mabuaisha/haproxy-blueprint/archive/master.zip
          main_file_name: { get_input: environment_blueprint_filename }
          external_resource: { get_input: use_external_database }
        deployment:
          id: { get_input: lb_deployment }
          inputs:
            manager_network: { get_input: proxy_manager_network }
            image: { get_input: lb_image }
            application_ip: { get_attribute: [ db, deployment, outputs, ips ] }
          outputs:
            ip: ip
          external_resource: { get_input: use_external_database }
    relationships:
    - type: cloudify.relationships.depends_on
      target: db
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: cfy_util.cloudify_deployment_proxy.tasks.create_deployment
          inputs:
            resource_config:
              blueprint: { get_property: [ SELF, resource_config, blueprint ] }
              deployment:
                id: { get_property: [ SELF, resource_config, deployment, id ] }
                inputs:
                  manager_network: { get_input: proxy_manager_network }
                  application_ip: { get_attribute: [ db, deployment, outputs, ips, 0 ] }
                outputs:
                  ip: { get_property: [ SELF, resource_config, deployment, outputs, ip ] }
        start:
          implementation: cfy_util.cloudify_deployment_proxy.tasks.execute_start
          inputs:
            workflow_id: install
            timeout: 1100
            interval: 15

  db:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: db_blueprint }
          blueprint_archive: https://github.com/mabuaisha/mariadb-blueprint/archive/master.zip
          main_file_name: { get_input: environment_blueprint_filename }
          external_resource: { get_input: use_external_database }
        deployment:
          id: { get_input: db_deployment }
          inputs:
            new_database_user: { get_input: new_database_user}
            new_database_password: { get_input: new_database_password }
            manager_network: { get_input: proxy_manager_network }
            image: { get_input: db_image }
          outputs:
            cluster_addresses: ips
          external_resource: { get_input: use_external_database }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: cfy_util.cloudify_deployment_proxy.tasks.execute_start
          inputs:
            workflow_id: install
            timeout: 1100
            interval: 15
